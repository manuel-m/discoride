#include <string.h>

#include "rGlfw.h"

static void drGlfw_mouseClic(int _id, int _state) {
    drUi_mouseClic((GLFW_MOUSE_BUTTON_LEFT == _id) ? RMOUSE_LEFT : RMOUSE_RIGHT,
            (GLFW_PRESS == _state) ? RMOUSE_DOWN : RMOUSE_UP );
}

static void drGlfw_key(int _code, int _state) {
    drUi_key(_code, (GLFW_PRESS == _state) ? RKEY_DOWN : RKEY_UP);
}

static void drGlfw_mouseWheel(int _wheel) {
    drUi_mouseWheel(_wheel);
}

static void drGlfw_windowResize(int _w, int _h) {
    
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    

    g_ui->window.w = _w;
    g_ui->window.h = _h;

    xt_cpy(g_ui->xt_lag_resize, g_ui->xt_current);

    g_ui->state |= RFLAG_RESIZE;

    /* 0.4 sec */
    xt_add_nano(g_ui->xt_lag_resize, 400000000L);
}

static void drGlfw_mouseMove(int _x, int _y) {
    drUi_mouseMove(_x, _y);
}

drUiMod_t* drGlfw_new(void){
    
 drUiMod_t* mod = (drUiMod_t*)calloc(1, sizeof(drUiMod_t));
 DR_UI_MOD_CB_BIND(mod, drGlfw)
    
 return mod;
  
}

int drGlfw_init(void) {
    
    DR_RERR(!glfwInit());
    glfwSetTime(0);
    return 0;
}

int drGlfw_close(void) {

    /* TODO */
    return 0;
}

int drGlfw_open(const char* _title) {

    GLFWvidmode desktopMode;

    if (!g_ui) goto err;

    if (!(g_ui->state & RFLAG_INIT)) {
        glfwGetDesktopMode(&desktopMode);

        g_ui->desktop.w = desktopMode.Width;
        g_ui->desktop.h = desktopMode.Height;

        g_ui->state |= RFLAG_INIT;

    } else {
        glfwCloseWindow();
    }

    if (g_ui->state & RFLAG_FULLSCREEN) {
        DR_GERR(!glfwOpenWindow(g_ui->desktop.w, g_ui->desktop.h, 0, 0, 0, 0, 0, 0, GLFW_WINDOW));
    } else {
        DR_GERR(!glfwOpenWindow(RDISPLAY_W, RDISPLAY_H, 0, 0, 0, 0, 0, 0, GLFW_WINDOW));
    }

    glfwSetMouseButtonCallback(drGlfw_mouseClic);
    glfwSetKeyCallback(drGlfw_key);
    glfwSetWindowSizeCallback(drGlfw_windowResize);
    glfwSetMousePosCallback(drGlfw_mouseMove);
    glfwSetMouseWheelCallback(drGlfw_mouseWheel);
    glfwEnable(GLFW_STICKY_KEYS);
    glfwSetWindowTitle(_title);
    glfwGetWindowSize(&g_ui->window.w, &g_ui->window.h);
    glfwSwapInterval(1);
    glfwEnable(GLFW_MOUSE_CURSOR);

    return 0;

err:
    glfwTerminate();
    return 1;

}

int drGlfw_mainloop(void) {

    /* ===[ first rescale ] ===================*/
    glfwGetWindowSize(&g_ui->window.w, &g_ui->window.h);

    do {

        /* ===[ rescale current time ] ==========*/
        xt_set_current_time(&g_ui->xt_current);

        /* ===[ check_resize ] ==================*/
        if (g_ui->state & RFLAG_RESIZE) {
            if ((g_ui->xt_current.sec > g_ui->xt_lag_resize.sec)
                    ||
                    ((g_ui->xt_current.sec == g_ui->xt_lag_resize.sec)
                    && (g_ui->xt_current.nsec > g_ui->xt_lag_resize.nsec))) {
                
                /* rescale */
                drUi_ratioCompute();

                glViewport(0, 0, g_ui->window.w, g_ui->window.h);

                /* Select and setup the projection matrix */
                glMatrixMode(GL_PROJECTION);
                glLoadIdentity();
                gluOrtho2D(0, g_ui->window.w, 0, g_ui->window.h);
                glMatrixMode(GL_MODELVIEW);

                /*  display_fonts_rescale(); TODO */
            }
            drUi_redrawAll();
            g_ui->state &= ~RFLAG_RESIZE;
        }


        /* no redraw during resize */
        if (!(g_ui->state & RFLAG_RESIZE)) {

            /*            display_check_user_cbs();
               display_update_wids_ctrls();
               display_draw_updated_wids();
             */
        }
        glfwSwapBuffers();


    } while (glfwGetKey(GLFW_KEY_ESC) != GLFW_PRESS &&
            glfwGetWindowParam(GLFW_OPENED));

    return 0;
}
